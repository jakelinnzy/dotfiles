#+TITLE: My doom-emacs configuration
#+AUTHOR: Lin Ziyang
#+PROPERTY: header-args    :results silent  :lexical t
#+OPTIONS:  toc:2

* Installing & setup
See the [[https://github.com/hlissner/doom-emacs][doom-emacs repository]] for complete guide.

** Dependencies
#+begin_example
brew install coreutils cmake fd git llvm ripgrep
#+end_example

Run =doom doctor= to find missing dependencies.

** Installing Doom
#+begin_example sh
git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
~/.emacs.d/bin/doom install
#+end_example
Add ~export PATH="$PATH:$HOME/.emacs.d/bin"~ to bashrc or zshrc file.
Put the Doom config file under =~/.doom.d/=.

** Switching Emacs versions on macOS
#+begin_example sh
brew tap d12frosted/emacs-plus
brew install emacs-plus@27    # if already installed, use `brew link` instead
rm /Applications/Emacs.app    # if Emacs.app is not a symlink, add -rf flag
ln -s $(brew --prefix)/opt/emacs-plus@27/Emacs.app /Applications
doom sync
#+end_example

* Meta
Remember to run =doom sync= after modifying in =init.el= and =packages.el=.

Use ~SPC m E~ to reload this file after making changes ([[Execute all code blocks in the org buffer][Remapped here]]). Also ~SPC q r~ restarts emacs (may take a few seconds).

To show /literal/ link in org-mode, press ~SPC m l t~.

** Enable lexical scoping
#+begin_src elisp
;; Generated by doom-emacs/config.org    -*- lexical-binding: t; -*-
#+end_src

* Doom core configuration
** Personal Information
Set name and email for GPG configuration, email, snippets, etc.
#+begin_src elisp
(setq user-full-name    "Ziyang Lin"
      user-mail-address "jakelinnzy@gmail.com")
#+end_src

** UI
Set fonts
#+begin_src elisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font"
                           :size 13 :weight 'regular)
      doom-variable-pitch-font (font-spec :family "Avenir Next"
                                          :size 13)
      ;; doom-variable-pitch-font (font-spec :family "sans")
      ;; This fixes CJK alignment issues
      doom-unicode-extra-fonts
      '("Source Han Sans-16" "PingFang SC-16"
        "Weather Icons" "github-octicons" "FontAwesome"
        "all-the-icons" "file-icons" "Menlo"))

;; (after! unicode
;;   (add-to-list 'unicode-fonts-fallback-font-list "PingFang SC-16"))

;; (mapc (lambda (x)
;;         (add-to-list 'doom-unicode-extra-fonts x))
;;       '("PingFang SC" "Input Mono"))

;; (setq face-font-rescale-alist
;;       (list (cons doom-unicode-font 1.2)))
#+end_src
[[*Fixing CJK Text align issue][TODO: Fix CJK text]]

Set theme to [[file:my-doom-ayu-mirage-theme.el][my custom color theme]] based on Ayu Mirage and make comments easier to read. The theme is actually loaded afterwards.
#+begin_src elisp
;; load theme from user config directory
(add-to-list 'custom-theme-load-path doom-private-dir)
(setq doom-theme 'my-doom-ayu-mirage
      my-doom-ayu-mirage-brighter-comments t)
#+end_src

Display relative line numbers. To cycle between (none, numbers, relative numbers), use ~SPC t l~ (doom/toggle-line-numbers)
#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src

Maximize window on startup
#+begin_src elisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

Display buffer name and major mode in the window title
#+begin_src elisp
(setq frame-title-format '("" "%b [%m] - Emacs"))
#+end_src

Show a image on splash screen
#+begin_src elisp
(setq fancy-splash-image
      (concat doom-private-dir "assets/emacs-icon-200x200.png"))
#+end_src

*** TODO Fixing CJK Text align issue
Desired behaviour: CJK characters are displayed exactly twice as wide as ASCII characters, so things would perfectly line up.

Haven't figured out if Emacs can achieve this. Current workaround is to run Emacs in a terminal emulator (which breaks image display), or use special fonts that achieves this (e.g. 等距更纱黑体 Sasara-Mono-SC). To test the display:

#+begin_example
滚滚长江东逝水 |||||浪花淘尽英雄 是非成败转头空||||||
The quick brown|||||fox jumps over the lazy dog||||||
#+end_example

Another (presumably better) workaround is to pair specific CJK font size with ASCII font size (works on Mac). Looks like the ~doom-unicode-extra-fonts~ list matches from right to left.
#+begin_example elisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font"
                           :size 13 :weight 'regular)
      ;; doom-variable-pitch-font (font-spec :family "sans")
      ;; This fixes CJK alignment issues
      doom-unicode-extra-fonts
      '("Source Han Sans-16" "PingFang SC-16"
        "Weather Icons" "github-octicons" "FontAwesome"
        "all-the-icons" "file-icons" "Menlo"))
#+end_example

** Modeline
The modeline always shows "LF UTF-8", which is unnecessary.
#+begin_src elisp
(defun my/doom-modeline-conditional-buffer-encoding ()
  "Hide the encoding information when it is not LF UTF-8."
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'my/doom-modeline-conditional-buffer-encoding)
#+end_src

** Change some behaviours
#+begin_src elisp
(setq auto-save-default t             ;; enable autosave for file-buffers
      delete-by-moving-to-trash t     ;; sudo rm -rf /
      undo-limit (* 100 1024 1024)    ;; Raise undo limit to 100MB
      evil-want-fine-undo t           ;; More granular undo in insert state
      truncate-string-ellipsis "…"    ;; Display unicode elipsis
      ;; Don't pollute the system clipboard
      save-interprogram-paste-before-kill t
      ;; Don't compact font caches during GC, will improve performance of the modeline plugin
      inhibit-compacting-font-caches t
      ring-bell-function #'ignore     ;; Disable bell completely
      )
#+end_src

** Don't be evil
Indentation: use 4 spaces by default.
#+begin_src elisp
(setq tab-width 4
      evil-shift-width 4)
(setq-default indent-tabs-mode nil)
#+end_src

Default settings
#+begin_src elisp
(setq evil-split-window-below t
      evil-vsplit-window-right t
      ;; :s command has the global flag by default, adding /g cancels the flag.
      evil-ex-substitute-global t)

#+end_src

Treat underscore as part of a word.
#+begin_src elisp
(modify-syntax-entry ?_ "w")
#+end_src

Avy: vim-easymotion for Emacs.

Use all lowercase letters plus semicolon.
#+begin_src elisp
(setq avy-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l
                 ?q ?w ?e ?r ?t ?y ?u ?i ?o ?p
                 ?z ?x ?c ?v ?b ?n ?m 59))
#+end_src
And evil-snipe is not needed.
#+begin_src elisp
(after! evil-snipe
    (evil-snipe-mode -1))
#+end_src

Enable smartparens-mode by default. Looks like it has some issues on Emacs 28.
#+begin_src elisp
;; In packages.el:
;;     (package! smartparens)
(require 'smartparens-config)
#+end_src

** Scratch buffer

#+begin_src elisp
(add-hook 'doom-scratch-buffer-hook #'text-mode)
#+end_src

* Mappings
** Use ~M-h/j/k/l~ to move between split windows.
Some major or minor modes may override this binding, so I decided to define a minor mode for this and make it take precedence over any other mode to get the consistent behaviour.
#+begin_src elisp
(defvar my-top-level-mode-map (make-sparse-keymap)
  "M-h/j/k/l to move between split windows.")
(map!
 (:map my-top-level-mode-map
  :nvm "M-h" #'windmove-left
  :nvm "M-j" #'windmove-down
  :nvm "M-k" #'windmove-up
  :nvm "M-l" #'windmove-right))
(define-minor-mode my-top-level-mode
  "Allows to use M-h/j/k/l to move between split windows."
  ;; The initial value
  :init-value t
  ;; Indicator for mode line
  :lighter " my-top-level"
  ;; The minor mode map
  :keymap my-top-level-mode-map)
(define-globalized-minor-mode global-my-top-level-mode
  my-top-level-mode my-top-level-mode)
;; This makes it take precedence over any other minor mode.
(add-to-list 'emulation-mode-map-alists
             `((my-top-level-mode . ,my-top-level-mode-map)))
(provide 'my-top-level-mode)
#+end_src

** Use ~m~ and ~,~ to scroll
IMO it's far more ergonomic to scroll with a single key than combinations such as ~C-u and C-d~. However in some modes (e.g. Dired) this is not desired. So I manually map these for each mode that I want.
#+begin_src elisp
(map!
 :nm  "m"   #'evil-scroll-down
 :nm  ","   #'evil-scroll-up
 ;; m sets marker by default, move it to M
 :nm  "M"   #'evil-set-marker

 (:after info
  (:mode Info-mode
   :nm "m" #'evil-scroll-down
   :nm "," #'evil-scroll-up))

 ;; Why the f**k is this called pdf-tools not pdf
 (:after pdf-tools
  (:map pdf-view-mode-map
   :nm "m" #'pdf-view-scroll-up-or-next-page
   :nm "," #'pdf-view-scroll-down-or-previous-page)))
#+end_src

** Other commonly used mappings
#+begin_src elisp
(map!
 ;; map j and k only in normal mode, so v10j works as expected.
 :n   "j"   #'evil-next-visual-line
 :n   "k"   #'evil-previous-visual-line
 :n   "RET" #'evil-ex-nohighlight
 ;; Home row keys jump to beginning and end of line
 :nvm "H"   #'doom/backward-to-bol-or-indent
 :nvm "L"   #'doom/forward-to-last-non-comment-or-eol

 :n   "f"   #'avy-goto-char
 :n   "s"   #'avy-goto-char-2
 ;; Use C-f/b/p/n in Insert mode
 :i   "C-p" #'previous-line
 :i   "C-n" #'next-line


 ;; company-mode for completion
 (:after company
  :i "C-x C-x" #'company-complete
  (:map company-active-map
   ;; Tab accepts completion
   "TAB" #'company-complete-selection
   [tab] #'company-complete-selection
   ;; Return always inserts newline
   "RET"    #'newline-and-indent
   [return] #'newline-and-indent))

 ;; treemacs: NERDTree-like file explorer
 ;; C-t or SPC f t to open treemacs
 :nm "C-t" #'treemacs
 (:leader
  (:prefix ("f" . "file")
   :desc "Open treemacs" "t" #'treemacs))
 (:after treemacs
  (:map treemacs-mode-map
   "p"    nil
   "p a"  #'treemacs-add-project-to-workspace
   "p d"  #'treemacs-remove-project-from-workspace
   "y"    nil
   "y y"  #'treemacs-copy-file
   "y m"  #'treemacs-move-file
   "M-h"  nil
   "M-j"  nil
   "M-k"  nil
   "M-l"  nil))

 ;; Dired: 'c f' creates empty file, 'c d' creates directory
 ;; Make it consistent with treemacs
 (:after dired
  (:map dired-mode-map
   :nm "c"   nil
   :nm "c f" #'dired-create-empty-file
   :nm "c d" #'dired-create-directory)))
#+end_src

** Use cmd+` to toggle the vterm buffer

#+begin_src elisp
(defun my/toggle-vterm ()
  (interactive)
  (evil-force-normal-state)
  (+vterm/toggle nil)
  ;; Scroll to bottom and enter insert state when switching into the terminal
  (when (eq major-mode 'vterm-mode)
    (evil-goto-line)
    (evil-insert-state)))

(map!
 ;; nvim
 :nvim "s-`" #'my/toggle-vterm)
#+end_src

** <Leader>
#+begin_src elisp
(map!
 ;; SPC l g - Go to definition
 (:leader
  :desc "Format buffer"            "c f" #'lsp-format-buffer
  :desc "Go to definition"         "c g" #'evil-goto-definition
  :desc "Toggle maximized window"  "t M" #'toggle-frame-maximized
  :desc "Move workspace left"  "TAB <" #'+workspace/swap-left
  :desc "Move workspace right" "TAB >" #'+workspace/swap-right))
#+end_src

* Plugins
** Manually compile some plugins
- vterm
  #+begin_example
M-x vterm-module-compile
  #+end_example
- PDF Tools
#+begin_example
M-x pdf-tools-install
#+end_example

** which-key
Make which-key appear quicker.

Looks like which-key has a bug on Emacs 28 that prevents it from displaying user key bindings.
#+begin_src elisp
(setq which-key-idle-delay 0.5
      which-key-idle-secondary-delay 0)
#+end_src
Hide ~evil-~ prefix that appear too much in which-key popup.
#+begin_src elisp
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))))
#+end_src

** treemacs
The width of treemacs window.
#+begin_src elisp
(setq treemacs-width 30)
#+end_src

** ivy, a search engine for love and life
Load with ~+fuzzy +icons~. Currently ~+childframe~ has bugs on macOS and is disabled.

Customize the size of popup window.
#+begin_src elisp
(setq ivy-posframe-width     100
      ivy-posframe-min-width 100
      ivy-posframe-height     25
      ivy-posframe-min-height 25)
;; (after! ivy
;;   (ivy-posframe-mode -1))
#+end_src

** Magit
#+begin_src elisp
(after! magit
  (map! :mode magit-mode
        :g "m" #'evil-scroll-down
        :g "," #'evil-scroll-up
        :g "M" #'magit-merge
        :g "R" #'magit-remote))
(map! :leader
      ;; Why isn't SPC g p mapped?
      :desc "Magit push" "g p" #'magit-push)
#+end_src

** IBuffer
Use j and k for navigating in this mode.
#+begin_src elisp
(after! ibuffer
  (map! :mode ibuffer-mode
        :i "j" #'evil-next-line
        :i "k" #'evil-previous-line
        :n "?" #'describe-mode))
#+end_src

** projectile
Manages projects with ~SPC p~.
#+begin_src elisp
(setq
 ;; Where to find projects
 projectile-project-search-path '("~/repos/")
 ;; Project root patterns
 projectile-project-root-files '(".root" "Cargo.toml" "requirements.txt")
 ;; Don't automatically add emacs sources into project list.
 projectile-ignored-projects '("~/" "/tmp" "~/.emacs.d/.local/straight/repos/"))

(defun projectile-ignored-project-function (filepath)
  "Return t if FILEPATH is within any of `projectile-ignored-projects'"
  (or (mapcar (lambda (p) (s-starts-with-p p filepath)) projectile-ignored-projects)))
#+end_src

** resize-window
A plugin for quickly resizing window.
#+begin_src elisp
(map! :leader
      :desc "resize-mode" "w e" #'resize-window)

;; redifine the keymap to be consistent with evil
(after! resize-window
  (setq resize-window-dispatch-alist
        '((?j resize-window--enlarge-down          " Resize - Expand down" t)
          (?k resize-window--enlarge-up            " Resize - Expand up" t)
          (?l resize-window--enlarge-horizontally  " Resize - horizontally" t)
          (?h resize-window--shrink-horizontally   " Resize - shrink horizontally" t)
          (?r resize-window--reset-windows         " Resize - reset window layout" nil)
          (?w resize-window--cycle-window-positive " Resize - cycle window" nil)
          (?W resize-window--cycle-window-negative " Resize - cycle window" nil)
          (?s split-window-below " Split window horizontally" nil)
          (?v split-window-right " Split window vertically" nil)
          (?k resize-window--delete-window " Delete window" nil)
          (?K resize-window--kill-other-windows " Kill other windows (save state)" nil)
          (?y resize-window--restore-windows " (when state) Restore window configuration" nil)
          (?? resize-window--display-menu          " Resize - display menu" nil))))
;;   List of actions for `resize-window-dispatch-default.
;;   Main data structure of the dispatcher with the form:
;;   \(char function documentation match-capitals\)
#+end_src
* Language integration
** LSP-mode
#+begin_src elisp
(setq lsp-enable-snippet t
      lsp-idle-delay 1.0
      lsp-modeline-diagnostics-message t
      lsp-modeline-diagnostics-scope :file
      ;; improve performance by allowing to read more frequently
      ;; doom already takes care of gc
      read-process-output-max (* 5 1024 1024))
#+end_src

** Spell checker
Only enable spell checking when I press ~SPC t s~ to avoid red underlines.

#+begin_src elisp
(after! spell-fu
  (remove-hook 'text-mode-hook
               #'spell-fu-mode))
#+end_src

** YASnippet
#+begin_src elisp
(after! yasnippet
  (add-to-list 'yas-snippet-dirs (concat doom-private-dir "snippets")))
#+end_src

** Python
Python's language server doens't support formatting, so a dedicated plugin (~py-autopep8~) is needed. ~SPC m f~ to format python code.
#+begin_src elisp
;; (setq-hook! 'python-mode-hook +format-with-lsp nil)
(map!
 (:after python
  (:map python-mode-map
   :localleader
   :desc "Format with autopep8" "f" #'py-autopep8-buffer)))
#+end_src

** Markdown
#+begin_src elisp
(after! markdown-mode
  (map! :mode markdown-mode
        :localleader
        ;; consistent with org-mode
        :desc "Toggle hiding links" "l t" #'markdown-toggle-url-hiding))
#+end_src
** Arduino
#+begin_src elisp
(add-to-list 'load-path "~/.doom.d/vendor/arduino-mode")
(setq auto-mode-alist (cons '("\\.\\(pde\\|ino\\)$" . arduino-mode) auto-mode-alist))
(autoload 'arduino-mode "arduino-mode" "Arduino editing mode." t)
#+end_src

* Org Mode
** Execute all code blocks in the org buffer
Use ~SPC m E~
#+begin_src elisp
(map! :mode org-mode
      (:localleader
       :desc "Execute buffer" "E" #'org-babel-execute-buffer))
#+end_src

** Toggle visibility of current block
#+begin_src elisp
(map! :mode org-mode
      (:localleader
       :desc "Toggle visibility of block" "v" #'org-hide-block-toggle))
#+end_src

** Change org directory
This has to be set before org loads.
#+begin_src elisp
(setq org-directory "~/Documents/org/")
#+end_src

** Hide block delimiters

#+begin_src elisp
(after! org
  (load! "vendor/org-prettify-source-block")
  (add-hook 'org-mode-hook #'rasmus/org-prettify-symbols))
#+end_src

* Done
#+begin_src elisp
"Done."
#+end_src
